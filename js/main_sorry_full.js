let element = "";
const getDayCount = () => {
  const countDownDate = new Date("Nov 8, 2019 00:00:00").getTime();
  const now = new Date().getTime();
  const distance = now - countDownDate;
  return Math.floor(distance / (1000 * 60 * 60 * 24));
};

const TYPE_MESSAGE = {
  ICON: "icon",
  IMAGE: "image",
  MESSAGE: "message",
};

const listMessage = [
  {
    type: TYPE_MESSAGE.MESSAGE,
    message: `B√© ∆°i! Ch√∫ng ta ƒë√£ c√≥ kho·∫£ng th·ªùi gian th·∫≠t ƒë·∫πp v√† ƒëang nh·∫Ω ƒë·∫øn gi·ªù n√≥ v·∫´n ƒëang di·ªÖn ra <b>${getDayCount()}</b> ng√†y.`,
    time: 7.3,
  },
  {
    type: TYPE_MESSAGE.MESSAGE,
    message: "Nh∆∞ng ch·ªâ v√¨ tho√°ng n√≥ng gi·∫≠n m√† a ƒë√£ h·ªßy ho·∫°i 2 tr√°i tim <b>y√™u th∆∞∆°ng nhau.</b> üíî",
    time: 4,
  },
  {
    type: TYPE_MESSAGE.ICON,
    message: "images/img_cry_1.webp",
    time: 2.5,
  },
  {
    type: TYPE_MESSAGE.MESSAGE,
    message: "Nhi·ªÅu l√∫c anh kh√¥ng t·ªët. ƒê√£ khi·∫øn em ph·∫£i ch·ªãu nhi·ªÅu t·ªïn th∆∞∆°ng üò≠",
    time: 4.5,
  },
  {
    type: TYPE_MESSAGE.MESSAGE,
    message: "A t·∫°o qu√° nhi·ªÅu √°p l·ª±c cho b·∫£n th√¢n.... A nghƒ© v·ªÅ t∆∞∆°ng lai 2 ƒë·ª©a sau n√†y nhi·ªÅu h∆°n hi·ªán t·∫°i.",
    time: 5.5,
  },
  {
    type: TYPE_MESSAGE.MESSAGE,
    message: "M√† qu√™n m·∫•t r·∫±ng m√¨nh ph·∫£i s·ªëng c·∫£ cho hi·ªán t·∫°i n·ªØa.",
    time: 4,
  },
  {
    type: TYPE_MESSAGE.MESSAGE,
    message: "N√¥ng n·ªïi l√† sai l·∫ßm c·ªßa tu·ªïi tr·∫ª. ƒê√°ng l·∫Ω anh c·∫ßn b√¨nh tƒ©nh h∆°n",
    time: 4.2,
  },
  {
    type: TYPE_MESSAGE.MESSAGE,
    message: "Em c√≤n nh·ªõ kh√¥ng?",
    time: 3.2,
  },
  {
    type: TYPE_MESSAGE.MESSAGE,
    message:
      "C√≥ m·ªôt tr√†ng trai ƒë√£ t·ª´ng: nh·ªãn ƒÉn m·ªói bu·ªïi tr∆∞a l√∫c tr·ªùi ƒë√¥ng l·∫°nh bu·ªët ƒë·ªÉ ti·∫øt ki·ªám ti·ªÅn chƒÉm s√≥c ng∆∞·ªùi m√¨nh y√™u",
    time: 7,
  },
  {
    type: TYPE_MESSAGE.MESSAGE,
    message: "Lo l·∫Øng chƒÉm s√≥c m·ªói khi em b·ªã ·ªëm, mua c√°c m√≥n ƒÉn em th√≠ch...",
    time: 5,
  },

  {
    type: TYPE_MESSAGE.MESSAGE,
    message: "Tr·ªü em ƒëi tr√™n c√°c con ph·ªë, c√πng em ƒëi ƒë·∫øn nh·ªØng n∆°i em mu·ªën ƒëi",
    time: 5,
  },
  {
    type: TYPE_MESSAGE.MESSAGE,
    message: "C√πng em g√¢y d·ª±ng t·∫•t c·∫£... lu√¥n c·ªë g·∫Øng v√¨ t∆∞∆°ng lai 2 ƒë·ª©a sau n√†y",
    time: 4.5,
  },
  {
    type: TYPE_MESSAGE.MESSAGE,
    message: "C√≥ m·ªôt ng∆∞·ªùi con g√°i: y√™n t√¢m tin t∆∞·ªüng n∆°i ch√†ng trai ƒë√≥, th√≠ch ƒë∆∞·ª£c ch√†ng trai ƒë√≥ c∆∞ng chi·ªÅu",
    time: 5,
  },
  {
    type: TYPE_MESSAGE.MESSAGE,
    message: "Quan t√¢m lo l·∫Øng t·ª´ng b·ªØa ƒÉn gi·∫•c ng·ªß, ƒë·∫øn c·∫£ qu·∫ßn √°o ƒë·ªÉ m·∫∑c...",
    time: 5,
  },
  {
    type: TYPE_MESSAGE.MESSAGE,
    message: "Lu√¥n nh·∫Øc nh·ªü ch√†ng trai ra ngo√†i ph·∫£i c·∫©n th·∫≠n, ƒëi ƒë·∫øn n·ªõi nh·ªõ nh·∫Øn tin cho em",
    time: 5,
  },
  {
    type: TYPE_MESSAGE.MESSAGE,
    message: "H·ªç c√πng y√™u th∆∞∆°ng nhau v√† v∆∞·ª£t qua nh·ªØng kh√≥ khƒÉn trong cu·ªôc s·ªëng.",
    time: 7,
  },
  {
    type: TYPE_MESSAGE.MESSAGE,
    message: "Nhi·ªÅu k·ªâ ni·ªám vui bu·ªìn m√† anh kh√¥ng th·ªÉ k·ªÉ h·∫øt ch·ªâ b·∫±ng v√†i d√≤ng",
    time: 5,
  },
  {
    type: TYPE_MESSAGE.ICON,
    message: "images/img_couple.gif",
    time: 3.5,
  },
  {
    type: TYPE_MESSAGE.MESSAGE,
    message: "A xin l·ªói ƒë√£ kh√¥ng th·ªÉ th·∫•u hi·ªÉu m·ªói khi em nh·∫Øc nh·ªü anh",
    time: 5.5,
  },
  {
    type: TYPE_MESSAGE.MESSAGE,
    message: "V√† c∆∞ x·ª≠ nh∆∞ ƒë·ª©a tr·∫ª con khi·∫øn em t·ªïn th∆∞∆°ng",
    time: 4.5,
  },
  {
    type: TYPE_MESSAGE.MESSAGE,
    message: "Ng√†n l·∫ßn xin l·ªói c≈©ng kh√¥ng th·ªÉ xo√° b·ªè h·∫øt nh·ªØng t·ªïn th∆∞∆°ng a g√¢y ra",
    time: 4.5,
  },
  {
    type: TYPE_MESSAGE.MESSAGE,
    message: "Nh∆∞ng mong em nh√¨n v√†o nh·ªØng g√¨ ch√∫ng ta ƒë√£ c√πng c·ªë g·∫Øng v√¨ nhau",
    time: 4.5,
  },
  {
    type: TYPE_MESSAGE.MESSAGE,
    message: "M√† c·∫£m nh·∫≠n ƒë∆∞·ª£c t√¨nh y√™u v√† l·ªùi xin l·ªói c·ªßa anh",
    time: 4.5,
  },
  {
    type: TYPE_MESSAGE.MESSAGE,
    message: "Tha th·ª© cho anh m·ªôt c∆° h·ªôi d√π l√† nh·ªè nh·∫•t",
    time: 4.5,
  },
  {
    type: TYPE_MESSAGE.MESSAGE,
    message: "ƒê√≥ l√† ƒëi·ªÅu anh mong m·ªèi ch·ªù ƒë·ª£i ng√†y qua ng√†y",
    time: 4.5,
  },
  {
    type: TYPE_MESSAGE.MESSAGE,
    message: "V√¨ anh y√™u em!",
    time: 5.5,
  },
  {
    type: TYPE_MESSAGE.MESSAGE,
    message:
      "ƒê·ª´ng ch·∫∑n anh n·ªØa nh√©... nick Facebook L√™ Huy Du v·∫´n ƒëang l√† ƒë∆∞∆°ng kim v√¥ ƒë·ªãch ƒë·ª£i b·ªè block t·ª´ An B√¨nh ƒë·∫•y huhu üò≠",
    time: 7.5,
  },
];

for (let i = 34; i >= 1; i--) {
  listMessage.push({
    type: TYPE_MESSAGE.IMAGE,
    message: `images/dubinh/${i}.jpg`,
  });
}

const renderTemplate = (child, className, index) => {
  return `<div class="box-message box-message-${index}">
    <img class="avatar-message" src="images/Avatar.png" />
    <div class="message ${className || ""}">
        ${child}
    </div>
</div>`;
};

const renderChildElement = (item) => {
  switch (item.type) {
    case TYPE_MESSAGE.ICON:
      return `<img src="${item.message}" />`;
    case TYPE_MESSAGE.IMAGE:
      return `<img src="${item.message}" class="image-view"/><img class="icon-heart" src="images/icon_heart.png" />`;
    default:
      return item.message;
  }
};

const initElement = () => {
  listMessage.forEach((item, index) => {
    element += renderTemplate(renderChildElement(item), item.type, index);
  });
  document.getElementById("box-message-container").innerHTML = element;
};

initElement();
// Animation Timeline
const animationTimeline = () => {
  const tl = new TimelineMax();

  tl.to(".container", 2, {
    visibility: "visible",
  });

  listMessage.forEach((item, index) => {
    tl.from(`.box-message-${index}`, 0.7, {
      opacity: 0,
      y: 10,
    }).to(
      `.box-message-${index}`,
      0.7,
      {
        opacity: 0,
        y: 10,
      },
      `+=${item?.time || 3}`
    );
  });

  // Restart Animation on click
  const replyBtn = document.getElementById("replay");
  replyBtn.addEventListener("click", () => {
    tl.restart();
  });
};

// Run fetch and animation in sequence
const resolveFetch = () => {
  return new Promise((resolve, reject) => {
    fetchData();
    resolve("Fetch done!");
  });
};

resolveFetch().then(animationTimeline());
