let element = "";
const getDayCount = () => {
    const countDownDate = new Date("Nov 8, 2019 00:00:00").getTime();
    const now = new Date().getTime();
    const distance = now - countDownDate;
    return Math.floor(distance / (1000 * 60 * 60 * 24));
}

const TYPE_MESSAGE = {
    ICON: 'icon',
    IMAGE: 'image',
    MESSAGE: 'message',
}

const listMessage = [
    {
        type: TYPE_MESSAGE.MESSAGE,
        message: `Em √†! anh c√≥ v√†i ƒëi·ªÅu mu·ªën n√≥i v·ªõi em =^^.`,
        time: 5,
    },
    {
        type: TYPE_MESSAGE.MESSAGE,
        message: `Ch√∫ng ta ƒë√£ c√≥ m·ªói t√¨nh kho·∫£ng th·ªùi gian th·∫≠t ƒë·∫πp v√† ƒëang nh·∫Ω ƒë·∫øn gi·ªù n√≥ v·∫´n <b>ƒëang di·ªÖn ra</b> ${getDayCount()} ng√†y.`,
        time: 5,
    },
    {
        type: TYPE_MESSAGE.MESSAGE,
        message: 'Nh∆∞ng ch·ªâ v√¨ tho√°ng n√≥ng gi·∫≠n anh ƒë√£ h·ªßy ho·∫°i 2 tr√°i tim <b>y√™u th∆∞∆°ng nhau.</b> üíî',
        time: 3,
    }, {
        type: TYPE_MESSAGE.ICON,
        message: 'images/img_cry_1.webp',
        time: 2.5,
    },
    {
        type: TYPE_MESSAGE.MESSAGE,
        message: 'Anh bi·∫øt anh l√† ng∆∞·ªùi ƒë√†n √¥ng x·∫•u xa t·ªìi t·ªá. ƒê√£ khi·∫øn em ph·∫£i ch·ªãu nhi·ªÅu <b>thi·ªát th√≤i</b> üò≠',
        time: 3.5,
    },
    {
        type: TYPE_MESSAGE.MESSAGE,
        message: 'A c≈©ng ch·∫≥ng bi·∫øt ch√¢n tr·ªçng ng∆∞·ªùi m√† anh <b class="hl">y√™u th∆∞∆°ng nh·∫•t</b> ƒë√≥ l√† <b>em</b>...',
        time: 3.5,
    },
    {
        type: TYPE_MESSAGE.MESSAGE,
        message: 'Nh∆∞ng e c√≥ bi·∫øt kh√¥ng. Cu·ªôc s·ªëng ch√∫ng ta c√≤n <b>d√†i v√† c√≤n nhi·ªÅu kh√≥ khƒÉn</b> ƒëang ch·ªù ƒë·ª£i ph√≠a tr∆∞·ªõc',
        time: 3.5,
    }, {
        type: TYPE_MESSAGE.MESSAGE,
        message: 'L√∫c ƒë·∫•y ch√∫ng ta s·∫Ω c·∫ßn m·ªôt ng∆∞·ªùi <b class="hl">lu√¥n b√™n c·∫°nh</b> quan t√¢m v√† chia s·∫ª bu·ªìn vui...',
        time: 3.5,
    }, {
        type: TYPE_MESSAGE.MESSAGE,
        message: 'Sai l·∫ßm ƒë·ªÉ ta tr·ªü n√™n <b>t·ªët h∆°n</b>. Sai l·∫ßm l√† m√≥n qu√† c·ªßa tu·ªïi tr·∫ª...nh∆∞ng ta ch·ªâ c√≥ quy·ªÅn m·∫Øc sai l·∫ßm m·ªôt l·∫ßn.',
        time: 4,
    }, {
        type: TYPE_MESSAGE.MESSAGE,
        message: 'Em c√≥ bi·∫øt ƒëi·ªÅu <b>ƒëau l√≤ng</b> nh·∫•t khi y√™u l√† g√¨ kh√¥ng? L√† khi c·∫£ 2 v·∫´n c√≤n t√¨nh c·∫£m, nh∆∞ng m·ªôt ng∆∞·ªùi ƒë√£ <span>kh√¥ng mu·ªën ·ªü l·∫°i n·ªØa</span>.',
        time: 4.5,
    },
    {
        type: TYPE_MESSAGE.ICON,
        message: 'images/img_cry_2.webp',
        time: 2.5,
    },
    {
        type: TYPE_MESSAGE.MESSAGE,
        message: 'M·ªói ng∆∞·ªùi s·∫Ω c√≥ m·ªôt <b>l√≠ do</b> c·ªßa ri√™ng m√¨nh. C·∫£m th·∫•y b·∫£n th√¢n kh√¥ng c√≤n <span>quan tr·ªçng</span> v·ªõi ng∆∞·ªùi kia, m·ªát m·ªèi, <span>kh√¥ng c√≤n mu·ªën c·ªë g·∫Øng</span>, trong l√≤ng ƒë√£ c√≥ qu√° <span>nhi·ªÅu t·ªïn th∆∞∆°ng.</span>',
        time: 6,
    },
    {
        type: TYPE_MESSAGE.MESSAGE,
        message: 'C√≥ l·∫Ω l√† do t√¨nh y√™u ƒë√£ v∆°i ƒëi nhi·ªÅu r·ªìi.... <b>anh kh√¥ng ch·∫Øc n·ªØa</b>. Nh∆∞ng ch·∫Øc ch·∫Øn m·ªôt ƒëi·ªÅu, ng∆∞·ªùi ·ªü l·∫°i s·∫Ω l√† ng∆∞·ªùi <b class="hl">√¥m nhi·ªÅu v·∫•n v∆∞∆°ng.</b>',
        time: 4,
    },
    {
        type: TYPE_MESSAGE.MESSAGE,
        message: 'N·ª±c c∆∞·ªùi th·∫≠t ƒë·∫•y... m√¨nh ch·ªâ n√≥ng gi·∫≠n c√≥ v√†i ti·∫øng th√¥i. Nh∆∞ng l·∫°i √¥m <b>ƒëau th∆∞∆°ng</b> su·ªët 1 qu√£ng ƒë∆∞·ªùng d√†i',
        time: 3.5,
    },
    {
        type: TYPE_MESSAGE.MESSAGE,
        message: 'M·ªôt m√¨nh anh lang thang <b>ch·ªën c≈©</b>, <b>l√≤ng qu·∫∑n ƒëau n∆∞·ªõc m·∫Øt ∆∞·ªõt nh√≤a</b> ch·∫≥ng th·ªÉ n√†o bi·∫øt ƒë∆∞·ª£c, li·ªáu mai sau c√≥ th·ªÉ <b>g·∫∑p l·∫°i</b> n·ªØa...',
        time: 4,
    }, {
        type: TYPE_MESSAGE.MESSAGE,
        message: 'H·∫±ng ng√†y ƒëi l√†m ch·ªâ mu·ªën v·ªÅ <b class="hl">ƒë∆∞·ª£c nh√¨n th·∫•y em.</b> L√≤ng anh ƒë∆∞·ª£c an ·ªßi gi·ªØa ch·ªën H√† N·ªôi ·ªìn √†o ƒë√¥ng ƒë√∫c.',
        time: 3,
    },
    {
        type: TYPE_MESSAGE.MESSAGE,
        message: 'Tr∆∞·ªõc khi ƒëi ng·ªß anh ƒë·ªÅu ph·∫£i nghƒ© gi·∫£ v·ªù nh∆∞ m√¨nh v·∫´n c√≤n ƒëang <b class="hl">h·∫°nh ph√∫c b√™n nhau.</b> R·ªìi ch√¨m v√†o c√πng gi·∫•c m∆° ƒë√≥.',
        time: 3.5,
    },
    {
        type: TYPE_MESSAGE.ICON,
        message: 'images/sleep.webp',
        time: 2.5,
    },
    {
        type: TYPE_MESSAGE.MESSAGE,
        message: 'Nh∆∞ng khi t·ªânh d·∫≠y th√¨ th·ª±c t·∫°i ph≈© ph√†ng r·∫±ng <span>"kh√¥ng c√≥ em b√™n c·∫°nh" </span> l·∫°i hi·ªán ra tr∆∞·ªõc m·∫Øt',
        time: 3.2,
    },
    {
        type: TYPE_MESSAGE.MESSAGE,
        message: 'Anh l·∫°i ph·∫£i t·ª± <b>l·ª´a d·ªëi</b> b·∫£n th√¢n m√¨nh. Che ƒëi <b>n·ªói bu·ªìn</b> v√† m·∫°nh m·∫Ω ƒë·ªÉ ƒë·ªëi m·∫∑t v·ªõi nh·ªØng kh√≥ khƒÉn trong cu·ªôc s·ªëng.',
        time: 3.6,
    },
    {
        type: TYPE_MESSAGE.MESSAGE,
        message: 'Ng√†n l·∫ßn anh y·∫øu ƒëu·ªëi, ng√†n l·∫ßn ƒë·ªÉ n∆∞·ªõc m·∫Øt r∆°i. ƒê·ªÉ r·ªìi ch·ª£t nh·∫≠n ra nƒÉm th√°ng kia c≈©ng ƒë√£ v·ªôi qua.',
        time: 3.2,
    },
    {
        type: TYPE_MESSAGE.ICON,
        message: 'images/img_cry_3.webp',
        time: 2.5,
    },
    {
        type: TYPE_MESSAGE.MESSAGE,
        message: 'Bu·ªìn nh·ªâ :(( ? Chia tay m√† c√≤n  <b class="hl">y√™u</b> nh∆∞ th·∫ø, c√≥ th·ªÉ quay <b class="hl">tr·ªü l·∫°i</b> kh√¥ng em? =((',
        time: 4,
    },
];

for (let i = 1; i <= 32; i++) {
    listMessage.push({
        type: TYPE_MESSAGE.IMAGE,
        message: `images/dubinh/${i}.jpg`,
    })
}

const renderTemplate = (child, className, index) => {
    return `<div class="box-message box-message-${index}">
    <img class="avatar-message" src="images/Avatar.png" />
    <div class="message ${className || ""}">
        ${child}
    </div>
</div>`;
};

const renderChildElement = (item) => {
    switch (item.type) {
        case TYPE_MESSAGE.ICON:
            return `<img src="${item.message}" />`;
        case TYPE_MESSAGE.IMAGE:
            return `<img src="${item.message}" class="image-view"/><img class="icon-heart" src="images/icon_heart.png" />`;
        default:
            return item.message
    }
}

const initElement = () => {
    listMessage.forEach((item, index) => {
        element += renderTemplate(renderChildElement(item), item.type, index);
    });
    document.getElementById('box-message-container').innerHTML = element;

};

initElement();
// Animation Timeline
const animationTimeline = () => {

    const tl = new TimelineMax();

    tl
        .to(".container", 2, {
            visibility: "visible"
        })


    listMessage.forEach((item, index) => {
        tl.from(`.box-message-${index}`, 0.7, {
            opacity: 0,
            y: 10,
        })
            .to(
                `.box-message-${index}`,
                0.7,
                {
                    opacity: 0,
                    y: 10,
                },
                `+=${item?.time || 3}`
            )
    })

    // Restart Animation on click
    const replyBtn = document.getElementById("replay");
    replyBtn.addEventListener("click", () => {
        tl.restart();
    });
};

// Run fetch and animation in sequence
const resolveFetch = () => {
    return new Promise((resolve, reject) => {
        fetchData();
        resolve("Fetch done!");
    });
};

resolveFetch().then(animationTimeline());